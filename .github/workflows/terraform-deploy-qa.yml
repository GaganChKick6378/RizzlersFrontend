name: Terraform and Frontend Deployment - QA Environment

on:
  push:
    branches:
      - QA

env:
  VITE_API_URL: https://lmak1hj7n7.execute-api.ap-south-1.amazonaws.com/qa

jobs:
  # Add test job as the first step
  test:
    name: "Run Tests - QA"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1
        
      - name: Use Node.js
        uses: actions/setup-node@v4.0.0
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Enable Corepack
        run: |
          corepack enable
          yarn --version
          
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
          
      - name: Run Tests
        run: yarn test
        
      - name: Generate Coverage Report
        run: yarn run coverage
        
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-qa
          path: frontend/coverage
          retention-days: 7

  # Step 1: Plan the changes without applying them
  terraform-plan:
    name: "Terraform Plan for QA"
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
    
    defaults:
      run:
        working-directory: terraform

    outputs:
      environment: ${{ steps.workspace.outputs.WORKSPACE }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-region: ap-south-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Create terraform directory and modules structure if it doesn't exist
      - name: Setup Terraform Directory
        run: |
          mkdir -p modules/frontend/s3
          mkdir -p modules/frontend/cloudfront
        working-directory: .

      # Create terraform configuration files for frontend resources
      - name: Create Terraform Configuration Files
        run: |
          cat <<EOF > main.tf
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
          }

          provider "aws" {
            region = "ap-south-1"
            default_tags {
              tags = {
                Creator = "RizzlersTeam"
                Purpose = "IBE"
                Environment = terraform.workspace
              }
            }
          }

          module "frontend_s3" {
            source = "./modules/frontend/s3"
          }

          module "frontend_cloudfront" {
            source                      = "./modules/frontend/cloudfront"
            bucket_name                 = module.frontend_s3.bucket_name
            bucket_regional_domain_name = module.frontend_s3.bucket_regional_domain_name
            depends_on                  = [module.frontend_s3]
          }

          output "cloudfront_distribution_domain" {
            description = "The domain name of the CloudFront distribution"
            value       = module.frontend_cloudfront.cloudfront_distribution_domain
          }
          
          output "bucket_name" {
            description = "The name of the S3 bucket"
            value       = module.frontend_s3.bucket_name
          }
          
          output "environment" {
            description = "Current environment (workspace)"
            value       = terraform.workspace
          }
          EOF

          cat <<EOF > backend.tf
          terraform {
            backend "s3" {
              bucket         = "rizzlers-ibe-dev-tfstate"
              key            = "frontend/terraform.tfstate"
              region         = "ap-south-1"
              encrypt        = true
              dynamodb_table = "rizzlers-terraform-locks"
            }
          }

          # Create the DynamoDB table for state locking if it doesn't exist
          resource "aws_dynamodb_table" "terraform_locks" {
            name         = "rizzlers-terraform-locks"
            billing_mode = "PAY_PER_REQUEST"
            hash_key     = "LockID"

            # Use the lifecycle meta-argument to make this resource optional
            lifecycle {
              prevent_destroy = true
              # Handle cases where the table already exists
              ignore_changes = all
            }

            attribute {
              name = "LockID"
              type = "S"
            }

            tags = {
              Name    = "Rizzlers-Terraform-State-Lock"
              Creator = "RizzlersTeam"
              Purpose = "IBE"
            }
          }
          EOF

          # Update S3 module without data source
          cat <<EOF > modules/frontend/s3/main.tf
          locals {
            bucket_name = "rizzlers-ibe-frontend-\${terraform.workspace}"
          }

          # No data source here - direct bucket creation
          resource "aws_s3_bucket" "frontend" {
            bucket = local.bucket_name
            
            tags = {
              Name = "Rizzlers-Frontend-S3-\${terraform.workspace}"
            }

            # Don't recreate if only these attributes change
            lifecycle {
              ignore_changes = [
                tags,
                server_side_encryption_configuration
              ]
            }
          }

          resource "aws_s3_bucket_ownership_controls" "frontend" {
            bucket = aws_s3_bucket.frontend.id
            rule {
              object_ownership = "BucketOwnerPreferred"
            }
          }

          resource "aws_s3_bucket_public_access_block" "frontend" {
            bucket = aws_s3_bucket.frontend.id

            block_public_acls       = false
            block_public_policy     = false
            ignore_public_acls      = false
            restrict_public_buckets = false
          }

          resource "aws_s3_bucket_acl" "frontend" {
            depends_on = [
              aws_s3_bucket_ownership_controls.frontend,
              aws_s3_bucket_public_access_block.frontend,
            ]

            bucket = aws_s3_bucket.frontend.id
            acl    = "public-read"
          }

          resource "aws_s3_bucket_website_configuration" "frontend" {
            bucket = aws_s3_bucket.frontend.id
            
            index_document {
              suffix = "index.html"
            }
            
            error_document {
              key = "index.html"
            }
          }

          resource "aws_s3_bucket_policy" "frontend" {
            bucket     = aws_s3_bucket.frontend.id
            depends_on = [aws_s3_bucket_public_access_block.frontend]
            
            policy = jsonencode({
              Version = "2012-10-17"
              Statement = [
                {
                  Effect    = "Allow"
                  Principal = "*"
                  Action    = "s3:GetObject"
                  Resource  = "\${aws_s3_bucket.frontend.arn}/*"
                }
              ]
            })
          }

          output "bucket_name" {
            description = "The name of the S3 bucket"
            value       = aws_s3_bucket.frontend.id
          }

          output "bucket_regional_domain_name" {
            description = "The regional domain name of the S3 bucket"
            value       = aws_s3_bucket.frontend.bucket_regional_domain_name
          }

          output "website_endpoint" {
            description = "The website endpoint of the S3 bucket"
            value       = aws_s3_bucket_website_configuration.frontend.website_endpoint
          }
          EOF

          cat <<EOF > modules/frontend/cloudfront/main.tf
          resource "aws_cloudfront_origin_access_identity" "frontend" {
            comment = "OAI for Rizzlers Frontend - \${terraform.workspace}"
          }

          resource "aws_cloudfront_distribution" "frontend" {
            enabled             = true
            is_ipv6_enabled     = true
            default_root_object = "index.html"
            price_class         = "PriceClass_100"
            
            origin {
              domain_name = var.bucket_regional_domain_name
              origin_id   = "S3-rizzlers-frontend-\${terraform.workspace}"
              
              custom_origin_config {
                http_port              = 80
                https_port             = 443
                origin_protocol_policy = "http-only"
                origin_ssl_protocols   = ["TLSv1.2"]
              }
            }
            
            default_cache_behavior {
              allowed_methods  = ["GET", "HEAD", "OPTIONS"]
              cached_methods   = ["GET", "HEAD"]
              target_origin_id = "S3-rizzlers-frontend-\${terraform.workspace}"
              
              forwarded_values {
                query_string = false
                
                cookies {
                  forward = "none"
                }
              }
              
              viewer_protocol_policy = "redirect-to-https"
              min_ttl                = 0
              default_ttl            = 60
              max_ttl                = 60
            }
            
            restrictions {
              geo_restriction {
                restriction_type = "none"
              }
            }
            
            viewer_certificate {
              cloudfront_default_certificate = true
            }
            
            custom_error_response {
              error_code         = 403
              response_code      = 200
              response_page_path = "/index.html"
            }
            
            custom_error_response {
              error_code         = 404
              response_code      = 200
              response_page_path = "/index.html"
            }
            
            tags = {
              Name = "Rizzlers-Frontend-CloudFront-\${terraform.workspace}"
            }

            # Prevent recreation issues
            lifecycle {
              ignore_changes = [
                tags,
                viewer_certificate
              ]
            }
          }

          output "cloudfront_distribution_domain" {
            description = "The domain name of the CloudFront distribution"
            value       = aws_cloudfront_distribution.frontend.domain_name
          }
          EOF

          cat <<EOF > modules/frontend/cloudfront/variables.tf
          variable "bucket_name" {
            description = "Name of the S3 bucket"
            type        = string
          }

          variable "bucket_regional_domain_name" {
            description = "Regional domain name of the S3 bucket"
            type        = string
          }
          EOF
        working-directory: terraform

      - name: Create DynamoDB table for state locking (if it doesn't exist)
        run: |
          # Check if the DynamoDB table exists
          if ! aws dynamodb describe-table --table-name rizzlers-terraform-locks &> /dev/null; then
            echo "Creating DynamoDB table for Terraform state locking..."
            aws dynamodb create-table \
              --table-name rizzlers-terraform-locks \
              --billing-mode PAY_PER_REQUEST \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --tags Key=Name,Value=Rizzlers-Terraform-State-Lock Key=Creator,Value=RizzlersTeam Key=Purpose,Value=IBE
            echo "DynamoDB table created."
          else
            echo "DynamoDB table for state locking already exists."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.5.7

      # Set workspace to qa for QA branch
      - name: Set Terraform Workspace
        id: workspace
        run: |
          echo "WORKSPACE=qa" >> $GITHUB_ENV
          echo "WORKSPACE=qa" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: terraform init

      - name: Select Workspace
        run: |
          terraform workspace select ${{ env.WORKSPACE }} || terraform workspace new ${{ env.WORKSPACE }}

      - name: Terraform Format
        run: terraform fmt
        continue-on-error: true

      - name: Debug - Check S3 Module File
        run: |
          echo "Contents of modules/frontend/s3/main.tf:"
          cat modules/frontend/s3/main.tf
          grep -n "data.*aws_s3_bucket" modules/frontend/s3/main.tf || echo "No data source found in file"

      - name: Import Existing Resources
        run: |
          # Check if DynamoDB table exists before trying to import
          if aws dynamodb describe-table --table-name rizzlers-terraform-locks &> /dev/null; then
            echo "DynamoDB table rizzlers-terraform-locks exists, attempting to import..."
            if ! terraform state list | grep -q "aws_dynamodb_table.terraform_locks"; then
              terraform import 'aws_dynamodb_table.terraform_locks' rizzlers-terraform-locks || echo "Failed to import DynamoDB table, but continuing..."
            fi
          else
            echo "DynamoDB table rizzlers-terraform-locks does not exist yet, will be created."
          fi
          
          # Check if S3 bucket exists before trying to import
          BUCKET_NAME="rizzlers-ibe-frontend-${{ env.WORKSPACE }}"
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "S3 bucket $BUCKET_NAME exists, attempting to import..."
            if ! terraform state list | grep -q "module.frontend_s3.aws_s3_bucket.frontend"; then
              terraform import 'module.frontend_s3.aws_s3_bucket.frontend' $BUCKET_NAME || echo "Failed to import S3 bucket, but continuing..."
            fi
          else
            echo "S3 bucket $BUCKET_NAME does not exist yet, will be created by Terraform."
          fi
        continue-on-error: true
      
      - name: Force Terraform Reinitialization
        run: |
          # Force reinitialization to clear any cached provider data
          rm -rf .terraform
          terraform init -upgrade
      
      - name: Check and Clean Terraform State
        run: |
          echo "Checking Terraform state for problematic data sources..."
          
          # List all resources in the state
          terraform state list || echo "No state found or state is empty"
          
          # Check if the problematic data source exists in the state
          if terraform state list | grep -q "module.frontend_s3.data.aws_s3_bucket.existing_bucket"; then
            echo "Found problematic data source in state, removing it..."
            terraform state rm module.frontend_s3.data.aws_s3_bucket.existing_bucket || echo "Failed to remove data source from state, but continuing..."
          fi
          
          # Check for any other data sources
          if terraform state list | grep -q "data.aws_s3_bucket"; then
            echo "Found other S3 bucket data sources in state, removing them..."
            terraform state list | grep "data.aws_s3_bucket" | xargs -r terraform state rm || echo "Failed to remove data sources from state, but continuing..."
          fi
          
          # Refresh the state to make sure it's up to date
          terraform refresh || echo "State refresh failed, but continuing..."
        continue-on-error: true
      
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out=tfplan
          echo "TERRAFORM_PLAN_EXIT_CODE=$?" >> $GITHUB_ENV
          terraform show -no-color tfplan > tfplan.txt
      
      - name: Save Plan as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/tfplan.txt
          retention-days: 5

  # Step 2: Require manual approval before proceeding
  manual-approval:
    name: "Manual Approval for QA Deployment"
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment: qa  # This creates a deployment environment with protection rules
    
    steps:
      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .
      
      - name: Display Terraform Plan
        run: cat tfplan.txt
      
      - name: Manual Approval
        run: echo "Deployment to QA environment has been approved!"

  # Step 3: Apply the approved changes
  terraform-apply:
    name: "Terraform Apply for QA"
    needs: manual-approval
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    defaults:
      run:
        working-directory: terraform

    outputs:
      environment: ${{ steps.workspace.outputs.WORKSPACE }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-region: ap-south-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.5.7

      # Set workspace to qa for QA branch
      - name: Set Terraform Workspace
        id: workspace
        run: |
          echo "WORKSPACE=qa" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init

      - name: Select Workspace
        run: |
          terraform workspace select ${{ env.WORKSPACE }} || terraform workspace new ${{ env.WORKSPACE }}

      - name: Create Terraform Directory
        run: |
          mkdir -p modules/frontend/s3
          mkdir -p modules/frontend/cloudfront
        working-directory: .

      # Create terraform configuration files for frontend resources (same as in plan step)
      - name: Create Terraform Configuration Files
        run: |
          # Same terraform configuration as in the plan step
          # (Content omitted for brevity)
          cat <<EOF > main.tf
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
          }

          provider "aws" {
            region = "ap-south-1"
            default_tags {
              tags = {
                Creator = "RizzlersTeam"
                Purpose = "IBE"
                Environment = terraform.workspace
              }
            }
          }

          module "frontend_s3" {
            source = "./modules/frontend/s3"
          }

          module "frontend_cloudfront" {
            source                      = "./modules/frontend/cloudfront"
            bucket_name                 = module.frontend_s3.bucket_name
            bucket_regional_domain_name = module.frontend_s3.bucket_regional_domain_name
            depends_on                  = [module.frontend_s3]
          }

          output "cloudfront_distribution_domain" {
            description = "The domain name of the CloudFront distribution"
            value       = module.frontend_cloudfront.cloudfront_distribution_domain
          }
          
          output "bucket_name" {
            description = "The name of the S3 bucket"
            value       = module.frontend_s3.bucket_name
          }
          EOF
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        
      - name: Set S3 Bucket Name
        id: set_bucket
        run: |
          # Use a hardcoded bucket name based on workspace
          echo "S3_BUCKET=rizzlers-ibe-frontend-${{ env.WORKSPACE }}" >> $GITHUB_ENV
        
      - name: Get CloudFront Domain
        id: cloudfront_domain
        run: |
          # Try to get the CloudFront domain if available, but don't fail if it's not
          CF_DOMAIN=$(terraform output cloudfront_distribution_domain || echo "")
          if [ ! -z "$CF_DOMAIN" ]; then
            # Remove quotes if present
            CF_DOMAIN=$(echo $CF_DOMAIN | tr -d '"')
            echo "CLOUDFRONT_DOMAIN=$CF_DOMAIN" >> $GITHUB_ENV
            echo "CloudFront domain: $CF_DOMAIN"
          else
            echo "CloudFront domain not available yet"
          fi
        continue-on-error: true

  # Step 4: Build and deploy the frontend
  build-and-deploy:
    name: "Build and Deploy Frontend - QA"
    needs: [terraform-apply, test]
    runs-on: ubuntu-latest
    env:
      WORKSPACE: qa
    
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1

      - name: Use Node.js
        uses: actions/setup-node@v4.0.0
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Enable Corepack
        run: |
          corepack enable
          yarn --version
        
      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build the QA Frontend
        run: |
          # Create a temporary .env.sentry-build-plugin file with Sentry configuration
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" > .env.sentry-build-plugin
          echo "SENTRY_ORG=${{ secrets.SENTRY_ORG }}" >> .env.sentry-build-plugin
          echo "SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}" >> .env.sentry-build-plugin
          
          # Create or update the config/.env.qa.anv file
          mkdir -p config
          echo "VITE_API_URL=https://lmak1hj7n7.execute-api.ap-south-1.amazonaws.com/qa" > config/.env.qa.anv
          echo "VITE_SENTRY_DSN=${{ secrets.VITE_SENTRY_DSN }}" >> config/.env.qa.anv
          
          # Create a direct .env file to ensure it's picked up
          echo "VITE_API_URL=https://lmak1hj7n7.execute-api.ap-south-1.amazonaws.com/qa" > .env
          
          # Debug: Print configs to verify content
          echo "========== DEBUGGING CONFIG FILES =========="
          echo "Content of config/.env.qa.anv:"
          cat config/.env.qa.anv
          
          echo "Content of .env:"
          cat .env
          
          # Check if other config files exist that might override this
          echo "Listing all config files:"
          find config -type f | xargs ls -la
          
          if [ -f ".env.qa" ]; then
            echo "Content of .env.qa (if exists):"
            cat .env.qa
          fi
          
          if [ -f "vite.config.js" ]; then
            echo "Content of vite.config.js:"
            cat vite.config.js
          fi
          
          # Verify environment variables
          echo "Environment variables for build:"
          echo "VITE_APP_ENV: $VITE_APP_ENV"
          echo "VITE_API_URL: $VITE_API_URL"
          echo "==========================================="
          
          # Set the env vars directly in vite.config.js if it exists
          if [ -f "vite.config.js" ]; then
            echo "Adding define plugin to vite.config.js to hardcode the URL..."
            # Backup the original file
            cp vite.config.js vite.config.js.bak
            
            # Add a define plugin to hardcode the URL during build
            sed -i '/plugins: \[/a \    { name: "hardcode-qa-url", config() { return { define: { "import.meta.env.VITE_API_URL": JSON.stringify("https://lmak1hj7n7.execute-api.ap-south-1.amazonaws.com/qa") } } } },' vite.config.js
            
            echo "Modified vite.config.js:"
            cat vite.config.js
          fi
          
          # Run the qa-specific build with explicit env var
          VITE_API_URL=https://lmak1hj7n7.execute-api.ap-south-1.amazonaws.com/qa yarn qa:build
        env:
          VITE_APP_ENV: ${{ needs.terraform-apply.outputs.environment || 'qa' }}
          VITE_API_URL: https://lmak1hj7n7.execute-api.ap-south-1.amazonaws.com/qa
      
      # Modify the debug step to be more thorough
      - name: Debug build output
        run: |
          echo "========== DEBUGGING BUILD OUTPUT =========="
          echo "Checking built files for API URL references:"
          
          # More comprehensive search for any API URLs
          echo "Searching for dev URL:"
          grep -r "uydc3b10re.execute-api.ap-south-1.amazonaws.com/dev" ./dist || echo "No dev API URL references found"
          
          echo "Searching for qa URL:"
          grep -r "lmak1hj7n7.execute-api.ap-south-1.amazonaws.com/qa" ./dist || echo "No qa API URL references found"
          
          echo "Searching for any amazonaws.com URLs:"
          grep -r "amazonaws.com" ./dist || echo "No AWS API URLs found"
          
          # Extract any potential URLs from JS files
          echo "Extracting potential URLs from JS files:"
          find ./dist -name "*.js" -exec grep -o 'https://[^"]*' {} \; | sort | uniq
          
          echo "==========================================="
        continue-on-error: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-region: ap-south-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to S3
        run: |
          # Use the S3 bucket name from terraform job
          S3_BUCKET="rizzlers-ibe-frontend-qa"
          
          echo "Deploying to S3 bucket: $S3_BUCKET"
          aws s3 sync ./dist/ s3://$S3_BUCKET/ --delete
        
      - name: Invalidate CloudFront Cache
        run: |
          # Get the S3 bucket name
          S3_BUCKET="rizzlers-ibe-frontend-qa"
          
          # Find CloudFront distribution directly from AWS API
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Origins.Items[].DomainName, '$S3_BUCKET')].Id" --output text)
          
          if [ -n "$DISTRIBUTION_ID" ]; then
            echo "Found distribution ID: $DISTRIBUTION_ID"
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          else
            echo "No CloudFront distribution found associated with $S3_BUCKET"
            echo "List of CloudFront distributions:"
            aws cloudfront list-distributions --query "DistributionList.Items[].{Id:Id, Domain:DomainName, Origins:Origins.Items[].DomainName}" --output json
            echo "Skipping invalidation"
          fi
        continue-on-error: true

      - name: Deployment Info
        run: |
          echo "Frontend deployed to QA environment:"
          echo "S3 Bucket: rizzlers-ibe-frontend-qa"
          if [ -n "${{ env.CLOUDFRONT_DOMAIN }}" ]; then
            echo "CloudFront URL: https://${{ env.CLOUDFRONT_DOMAIN }}"
          else
            echo "CloudFront distribution not available yet"
          fi 