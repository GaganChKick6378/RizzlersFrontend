name: Terraform Deploy Frontend

on:
  push:
    branches:
      - dev  # Trigger on direct pushes to dev branch
  pull_request:
    types: [closed]
    branches:
      - dev  # Trigger when PRs are merged into dev branch
  workflow_dispatch:  # Allow manual triggers

env:
  TERRAFORM_VERSION: 1.5.7
  NODE_VERSION: 18
  DEFAULT_ENVIRONMENT: dev
  TERRAFORM_STATE_BUCKET: rizzlers-ibe-dev-tfstate
  TERRAFORM_STATE_KEY: frontend/terraform.tfstate
  TERRAFORM_STATE_REGION: ap-south-1

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    # Only run this job when push event or PR is merged (not when PR is just closed without merging)
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TERRAFORM_STATE_REGION }}

      - name: Create Terraform Configuration
        run: |
          mkdir -p terraform/environments/${{ env.DEFAULT_ENVIRONMENT }}
          cat > terraform/environments/${{ env.DEFAULT_ENVIRONMENT }}/main.tf << 'EOF'
          terraform {
            backend "s3" {
              bucket = "rizzlers-ibe-dev-tfstate"
              key    = "frontend/terraform.tfstate"
              region = "ap-south-1"
            }
          }

          provider "aws" {
            region = "ap-south-1"
          }

          # S3 bucket configuration
          resource "aws_s3_bucket" "frontend_bucket" {
            bucket = "rizzlers-frontend-dev"
            tags = {
              Name = "Rizzlers Frontend Bucket"
              Environment = "dev"
            }
          }

          # S3 bucket website configuration
          resource "aws_s3_bucket_website_configuration" "frontend_website" {
            bucket = aws_s3_bucket.frontend_bucket.id
            index_document {
              suffix = "index.html"
            }
            error_document {
              key = "index.html"
            }
          }

          # S3 bucket public access block
          resource "aws_s3_bucket_public_access_block" "frontend_public_access" {
            bucket = aws_s3_bucket.frontend_bucket.id
            block_public_acls       = false
            block_public_policy     = false
            ignore_public_acls      = false
            restrict_public_buckets = false
          }

          # S3 bucket policy for public access
          resource "aws_s3_bucket_policy" "frontend_policy" {
            bucket = aws_s3_bucket.frontend_bucket.id
            policy = jsonencode({
              Version = "2012-10-17"
              Statement = [
                {
                  Sid = "PublicReadGetObject"
                  Effect = "Allow"
                  Principal = "*"
                  Action = [
                    "s3:GetObject"
                  ]
                  Resource = [
                    "${aws_s3_bucket.frontend_bucket.arn}/*"
                  ]
                }
              ]
            })
            depends_on = [aws_s3_bucket_public_access_block.frontend_public_access]
          }

          # CloudFront distribution
          resource "aws_cloudfront_distribution" "frontend" {
            enabled             = true
            is_ipv6_enabled     = true
            default_root_object = "index.html"
            comment             = "Rizzlers Frontend Distribution"
            price_class         = "PriceClass_200"
            wait_for_deployment = false

            origin {
              domain_name = aws_s3_bucket_website_configuration.frontend_website.website_endpoint
              origin_id   = "S3-${aws_s3_bucket.frontend_bucket.id}"

              custom_origin_config {
                http_port              = 80
                https_port             = 443
                origin_protocol_policy = "http-only"
                origin_ssl_protocols   = ["TLSv1.2"]
              }
            }

            default_cache_behavior {
              allowed_methods  = ["GET", "HEAD", "OPTIONS"]
              cached_methods   = ["GET", "HEAD"]
              target_origin_id = "S3-${aws_s3_bucket.frontend_bucket.id}"
              forwarded_values {
                query_string = false
                cookies {
                  forward = "none"
                }
              }
              viewer_protocol_policy = "redirect-to-https"
              min_ttl                = 0
              default_ttl            = 3600
              max_ttl                = 86400
            }

            custom_error_response {
              error_code         = 403
              response_code      = 200
              response_page_path = "/index.html"
            }

            custom_error_response {
              error_code         = 404
              response_code      = 200
              response_page_path = "/index.html"
            }

            restrictions {
              geo_restriction {
                restriction_type = "none"
              }
            }

            viewer_certificate {
              cloudfront_default_certificate = true
            }

            tags = {
              Name = "Rizzlers-dev-cloudfront"
              Creator = "Rizzlers Team"
              Purpose = "IBE"
            }
          }

          output "s3_bucket_name" {
            value = aws_s3_bucket.frontend_bucket.id
          }

          output "cloudfront_distribution_id" {
            value = aws_cloudfront_distribution.frontend.id
          }

          output "cloudfront_domain_name" {
            value = aws_cloudfront_distribution.frontend.domain_name
          }

          output "s3_website_endpoint" {
            value = aws_s3_bucket_website_configuration.frontend_website.website_endpoint
          }
          EOF
          
          # Replace placeholders with environment variables
          sed -i "s/rizzlers-ibe-dev-tfstate/${{ env.TERRAFORM_STATE_BUCKET }}/g" terraform/environments/${{ env.DEFAULT_ENVIRONMENT }}/main.tf
          sed -i "s!frontend/terraform.tfstate!${{ env.TERRAFORM_STATE_KEY }}!g" terraform/environments/${{ env.DEFAULT_ENVIRONMENT }}/main.tf
          sed -i "s/ap-south-1/${{ env.TERRAFORM_STATE_REGION }}/g" terraform/environments/${{ env.DEFAULT_ENVIRONMENT }}/main.tf

      - name: Terraform Init
        run: |
          cd terraform/environments/${{ env.DEFAULT_ENVIRONMENT }}
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/environments/${{ env.DEFAULT_ENVIRONMENT }}
          terraform plan -no-color
        id: plan

      - name: Terraform Apply
        run: |
          cd terraform/environments/${{ env.DEFAULT_ENVIRONMENT }}
          terraform apply -auto-approve
        id: terraform

      - name: Extract Terraform Outputs
        run: |
          cd terraform/environments/${{ env.DEFAULT_ENVIRONMENT }}
          echo "S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV
          echo "CLOUDFRONT_DOMAIN_NAME=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_ENV
          echo "S3_WEBSITE_ENDPOINT=$(terraform output -raw s3_website_endpoint)" >> $GITHUB_ENV

      - name: Build React Frontend
        run: |
          pwd
          ls -la
          # Different paths based on repository structure
          if [ -d "frontend" ]; then
            cd frontend
            npm install
            npm run build
            cd ..
            # Determine build output directory
            if [ -d "frontend/dist" ]; then
              mkdir -p dist
              cp -r frontend/dist/* dist/
            elif [ -d "frontend/build" ]; then
              mkdir -p dist
              cp -r frontend/build/* dist/
            fi
          else
            # Assume we're already in the frontend directory
            npm install
            npm run build
            
            # Check if dist or build is used
            if [ -d "dist" ]; then
              echo "Build folder is dist/"
            elif [ -d "build" ]; then
              mkdir -p dist
              cp -r build/* dist/
            else
              echo "Creating placeholder dist directory"
              mkdir -p dist
              echo "<html><body><h1>Rizzlers Frontend</h1><p>Placeholder page</p></body></html>" > dist/index.html
            fi
          fi
          
          ls -la dist/ || echo "Could not list dist directory"

      - name: Deploy to S3
        run: |
          if [ -d "dist" ]; then
            echo "Deploying to S3 bucket: ${{ env.S3_BUCKET_NAME }}"
            aws s3 sync dist/ s3://${{ env.S3_BUCKET_NAME }}/ --delete
          else
            echo "No dist directory found!"
            exit 1
          fi

      - name: Invalidate CloudFront Cache
        run: |
          if [ ! -z "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "Invalidating CloudFront cache for distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
            aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          else
            echo "No CloudFront distribution ID found"
          fi

      - name: Output Deployment Information
        run: |
          echo "=============================================================="
          echo "Deployment completed!"
          echo "S3 Bucket: ${{ env.S3_BUCKET_NAME }}"
          echo "CloudFront Distribution ID: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          
          if [ ! -z "${{ env.CLOUDFRONT_DOMAIN_NAME }}" ]; then
            echo "Website URL: https://${{ env.CLOUDFRONT_DOMAIN_NAME }}"
          else
            echo "Website URL: http://${{ env.S3_WEBSITE_ENDPOINT }}"
          fi
          echo "==============================================================" 