name: Terraform and Frontend Deployment

on:
  push:
    branches:
      - dev
      - QA
  pull_request:
    branches:
      - dev
      - QA
    types: [closed]

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-south-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Create terraform directory and modules structure if it doesn't exist
      - name: Setup Terraform Directory
        run: |
          mkdir -p modules/frontend/s3
          mkdir -p modules/frontend/cloudfront
        working-directory: .

      # Create terraform configuration files for frontend resources
      - name: Create Terraform Configuration Files
        run: |
          cat <<EOF > main.tf
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
            }
            
            backend "s3" {
              bucket = "rizzlers-ibe-dev-tfstate"
              key    = "frontend/terraform.tfstate"
              region = "ap-south-1"
            }
          }

          provider "aws" {
            region = "ap-south-1"
            default_tags {
              tags = {
                Creator = "RizzlersTeam"
                Purpose = "IBE"
              }
            }
          }

          module "frontend_s3" {
            source = "./modules/frontend/s3"
          }

          module "frontend_cloudfront" {
            source                      = "./modules/frontend/cloudfront"
            bucket_name                 = module.frontend_s3.bucket_name
            bucket_regional_domain_name = module.frontend_s3.bucket_regional_domain_name
            depends_on                  = [module.frontend_s3]
          }

          output "cloudfront_distribution_domain" {
            description = "The domain name of the CloudFront distribution"
            value       = module.frontend_cloudfront.cloudfront_distribution_domain
          }
          
          output "bucket_name" {
            description = "The name of the S3 bucket"
            value       = module.frontend_s3.bucket_name
          }
          EOF

          cat <<EOF > modules/frontend/s3/main.tf
          resource "aws_s3_bucket" "frontend" {
            bucket = "rizzlers-ibe-frontend-\${terraform.workspace}"
            
            tags = {
              Name = "Rizzlers-Frontend-S3"
            }
          }

          resource "aws_s3_bucket_ownership_controls" "frontend" {
            bucket = aws_s3_bucket.frontend.id
            rule {
              object_ownership = "BucketOwnerPreferred"
            }
          }

          resource "aws_s3_bucket_public_access_block" "frontend" {
            bucket = aws_s3_bucket.frontend.id

            block_public_acls       = false
            block_public_policy     = false
            ignore_public_acls      = false
            restrict_public_buckets = false
          }

          resource "aws_s3_bucket_acl" "frontend" {
            depends_on = [
              aws_s3_bucket_ownership_controls.frontend,
              aws_s3_bucket_public_access_block.frontend,
            ]

            bucket = aws_s3_bucket.frontend.id
            acl    = "public-read"
          }

          resource "aws_s3_bucket_website_configuration" "frontend" {
            bucket = aws_s3_bucket.frontend.id
            
            index_document {
              suffix = "index.html"
            }
            
            error_document {
              key = "index.html"
            }
          }

          resource "aws_s3_bucket_policy" "frontend" {
            bucket     = aws_s3_bucket.frontend.id
            depends_on = [aws_s3_bucket_public_access_block.frontend]
            
            policy = jsonencode({
              Version = "2012-10-17"
              Statement = [
                {
                  Effect    = "Allow"
                  Principal = "*"
                  Action    = "s3:GetObject"
                  Resource  = "\${aws_s3_bucket.frontend.arn}/*"
                }
              ]
            })
          }

          output "bucket_name" {
            description = "The name of the S3 bucket"
            value       = aws_s3_bucket.frontend.id
          }

          output "bucket_regional_domain_name" {
            description = "The regional domain name of the S3 bucket"
            value       = aws_s3_bucket.frontend.bucket_regional_domain_name
          }

          output "website_endpoint" {
            description = "The website endpoint of the S3 bucket"
            value       = aws_s3_bucket_website_configuration.frontend.website_endpoint
          }
          EOF

          cat <<EOF > modules/frontend/cloudfront/main.tf
          resource "aws_cloudfront_origin_access_identity" "frontend" {
            comment = "OAI for Rizzlers Frontend"
          }

          resource "aws_cloudfront_distribution" "frontend" {
            enabled             = true
            is_ipv6_enabled     = true
            default_root_object = "index.html"
            price_class         = "PriceClass_100"
            
            origin {
              domain_name = var.bucket_regional_domain_name
              origin_id   = "S3-rizzlers-frontend"
              
              custom_origin_config {
                http_port              = 80
                https_port             = 443
                origin_protocol_policy = "http-only"
                origin_ssl_protocols   = ["TLSv1.2"]
              }
            }
            
            default_cache_behavior {
              allowed_methods  = ["GET", "HEAD", "OPTIONS"]
              cached_methods   = ["GET", "HEAD"]
              target_origin_id = "S3-rizzlers-frontend"
              
              forwarded_values {
                query_string = false
                
                cookies {
                  forward = "none"
                }
              }
              
              viewer_protocol_policy = "redirect-to-https"
              min_ttl                = 0
              default_ttl            = 3600
              max_ttl                = 86400
            }
            
            restrictions {
              geo_restriction {
                restriction_type = "none"
              }
            }
            
            viewer_certificate {
              cloudfront_default_certificate = true
            }
            
            custom_error_response {
              error_code         = 403
              response_code      = 200
              response_page_path = "/index.html"
            }
            
            custom_error_response {
              error_code         = 404
              response_code      = 200
              response_page_path = "/index.html"
            }
            
            tags = {
              Name = "Rizzlers-Frontend-CloudFront"
            }
          }

          output "cloudfront_distribution_domain" {
            description = "The domain name of the CloudFront distribution"
            value       = aws_cloudfront_distribution.frontend.domain_name
          }
          EOF

          cat <<EOF > modules/frontend/cloudfront/variables.tf
          variable "bucket_name" {
            description = "Name of the S3 bucket"
            type        = string
          }

          variable "bucket_regional_domain_name" {
            description = "Regional domain name of the S3 bucket"
            type        = string
          }
          EOF
        working-directory: terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Determine the Terraform workspace based on the branch
      - name: Set Terraform Workspace
        id: workspace
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/QA" ]]; then
            echo "WORKSPACE=qa" >> $GITHUB_ENV
          else
            echo "WORKSPACE=dev" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: terraform init

      - name: Select Workspace
        run: |
          terraform workspace select ${{ env.WORKSPACE }} || terraform workspace new ${{ env.WORKSPACE }}

      - name: Terraform Format
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Plan
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
        run: terraform apply -auto-approve -input=false
        
      - name: Get Terraform Outputs
        id: terraform_outputs
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
        run: |
          # Use a more robust approach to get terraform outputs
          BUCKET_NAME=$(terraform output -json | jq -r '.bucket_name.value // empty')
          CLOUDFRONT_DOMAIN=$(terraform output -json | jq -r '.cloudfront_distribution_domain.value // empty')
          
          # Use default values if outputs are empty
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="rizzlers-ibe-frontend-${{ env.WORKSPACE }}"
          fi
          
          echo "S3_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
          
          if [ ! -z "$CLOUDFRONT_DOMAIN" ]; then
            echo "CLOUDFRONT_DOMAIN=$CLOUDFRONT_DOMAIN" >> $GITHUB_ENV
          fi

  build-and-deploy:
    name: "Build and Deploy Frontend"
    needs: terraform
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Build Frontend
        run: npm run build
        env:
          VITE_APP_ENV: ${{ env.WORKSPACE }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-south-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to S3
        run: |
          # Make sure S3_BUCKET is set
          if [ -z "${{ env.S3_BUCKET }}" ]; then
            S3_BUCKET="rizzlers-ibe-frontend-${{ needs.terraform.outputs.WORKSPACE || 'dev' }}"
            echo "Using default S3 bucket: $S3_BUCKET"
          else
            S3_BUCKET="${{ env.S3_BUCKET }}"
          fi
          
          # Deploy to S3
          aws s3 sync ./dist/ s3://$S3_BUCKET/ --delete
        
      - name: Invalidate CloudFront Cache
        run: |
          # Get the CloudFront distribution ID for the S3 bucket
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Origins.Items[].DomainName, '${{ env.S3_BUCKET }}')].Id" --output text)
          
          if [ ! -z "$DISTRIBUTION_ID" ]; then
            echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          else
            echo "No CloudFront distribution found for S3 bucket: ${{ env.S3_BUCKET }}"
          fi

      - name: Deployment Info
        run: |
          echo "Frontend deployed to:"
          echo "S3 Bucket: ${{ env.S3_BUCKET }}"
          if [ ! -z "${{ env.CLOUDFRONT_DOMAIN }}" ]; then
            echo "CloudFront URL: https://${{ env.CLOUDFRONT_DOMAIN }}"
          fi 