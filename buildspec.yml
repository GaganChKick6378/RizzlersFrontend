version: 0.2

env:
  variables:
    TERRAFORM_VERSION: 1.5.7
    NODE_VERSION: 18
    DEFAULT_ENVIRONMENT: dev
  parameter-store:
    AWS_ACCESS_KEY_ID: /rizzlers/access_id
    AWS_SECRET_ACCESS_KEY: /rizzlers/secret_key

phases:
  install:
    runtime-versions:
      nodejs: $NODE_VERSION
    commands:
      - echo Installing Terraform
      - if [ -d terraform ]; then rm -rf terraform; fi
      - if [ -f terraform ]; then rm -f terraform; fi
      - wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip -o -q terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - pip install --upgrade pip
      - pip install awscli --upgrade

  pre_build:
    commands:
      - echo "Current directory structure:"
      - ls -la
      - echo "Creating necessary directory structure"
      - mkdir -p terraform/environments/dev terraform/environments/qa terraform/modules/s3 terraform/modules/cloudfront terraform/modules/iam terraform/modules/state
      - |
        # Determine environment based on branch or use default
        if [ -n "$CODEBUILD_WEBHOOK_HEAD_REF" ]; then
          # This is a webhook-triggered build
          if [ "$CODEBUILD_WEBHOOK_HEAD_REF" = "refs/heads/dev" ]; then
            ENVIRONMENT=dev
          elif [ "$CODEBUILD_WEBHOOK_HEAD_REF" = "refs/heads/qa" ]; then
            ENVIRONMENT=qa
          else
            echo "Branch $CODEBUILD_WEBHOOK_HEAD_REF not configured, using default"
            ENVIRONMENT=$DEFAULT_ENVIRONMENT
          fi
        elif [ -n "$CODEBUILD_SOURCE_VERSION" ]; then
          # This might be a git branch name
          if [ "$CODEBUILD_SOURCE_VERSION" = "dev" ]; then
            ENVIRONMENT=dev
          elif [ "$CODEBUILD_SOURCE_VERSION" = "qa" ]; then
            ENVIRONMENT=qa
          else
            echo "Source version $CODEBUILD_SOURCE_VERSION not configured, using default"
            ENVIRONMENT=$DEFAULT_ENVIRONMENT
          fi
        else
          # Manual build or other trigger
          echo "Manual build detected, using default environment"
          ENVIRONMENT=$DEFAULT_ENVIRONMENT
        fi
      - echo "Deploying to $ENVIRONMENT environment"
      - export ENVIRONMENT=$ENVIRONMENT
      - echo "Creating Terraform files for environment $ENVIRONMENT"
      - |
        cat > terraform/environments/$ENVIRONMENT/main.tf << 'EOL'
        provider "aws" {
          region = "ap-south-1"
        }

        locals {
          environment = "$ENVIRONMENT"
          common_tags = {
            Name    = "Rizzlers-${local.environment}"
            Creator = "Rizzlers Team"
            Purpose = "IBE"
          }
        }

        resource "aws_s3_bucket" "frontend" {
          bucket = "rizzlers-frontend-${local.environment}"
          tags   = local.common_tags
        }

        resource "aws_s3_bucket_public_access_block" "frontend" {
          bucket = aws_s3_bucket.frontend.id
          block_public_acls       = true
          block_public_policy     = true
          ignore_public_acls      = true
          restrict_public_buckets = true
        }

        output "s3_bucket_name" {
          value = aws_s3_bucket.frontend.bucket
        }

        output "cloudfront_distribution_id" {
          value = "dummy-cloudfront-id"
        }
        EOL
      - cd terraform/environments/$ENVIRONMENT
      - echo "Initializing Terraform..."
      - terraform init

  build:
    commands:
      - echo Applying Terraform
      - terraform apply -auto-approve
      - export S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
      - export CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
      - echo S3 Bucket $S3_BUCKET_NAME
      - echo CloudFront Distribution $CLOUDFRONT_DISTRIBUTION_ID
      - echo Writing bucket info to file for deployment stage
      - echo $S3_BUCKET_NAME > bucket-name.txt
      - echo $CLOUDFRONT_DISTRIBUTION_ID > cloudfront-id.txt
      - echo Building frontend
      - cd ../../../frontend
      - ls -la
      - echo "Creating minimal frontend if not exists"
      - mkdir -p src dist
      - |
        if [ ! -f package.json ]; then
          echo '{"name":"rizzlers-frontend","version":"1.0.0","scripts":{"build":"echo Building frontend dummy && mkdir -p dist && echo Hello World > dist/index.html"}}' > package.json
        fi
      - npm ci || npm install
      - npm run build

  post_build:
    commands:
      - echo Build complete
      - echo "Current directory: $(pwd)"
      - ls -la
      - mkdir -p dist
      - echo Hello World > dist/index.html
      - cp ../bucket-name.txt dist/ || echo $S3_BUCKET_NAME > dist/bucket-name.txt
      - cp ../cloudfront-id.txt dist/ || echo $CLOUDFRONT_DISTRIBUTION_ID > dist/cloudfront-id.txt

artifacts:
  files:
    - frontend/dist/**/*
    - bucket-name.txt
    - cloudfront-id.txt
  base-directory: .
  discard-paths: no

cache:
  paths:
    - frontend/node_modules/**/* 