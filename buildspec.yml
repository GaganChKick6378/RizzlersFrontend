version: 0.2

env:
  variables:
    TERRAFORM_VERSION: 1.5.7
    NODE_VERSION: 18
    DEFAULT_ENVIRONMENT: dev
    TERRAFORM_STATE_BUCKET: rizzlers-ibe-dev-tfstate
    TERRAFORM_STATE_KEY: frontend/terraform.tfstate
    TERRAFORM_STATE_REGION: ap-south-1

phases:
  install:
    runtime-versions:
      nodejs: $NODE_VERSION
    commands:
      - echo Installing Terraform
      - rm -rf terraform/  # Clean up if exists
      - rm -f terraform
      - wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip -o -q terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - pip install --upgrade pip
      - pip install awscli --upgrade

  pre_build:
    commands:
      - echo Creating Terraform configuration
      - ENVIRONMENT=dev
      - mkdir -p terraform/environments/$ENVIRONMENT
      - |
        cat > terraform/environments/$ENVIRONMENT/main.tf << 'EOF'
        terraform {
          backend "s3" {
            bucket = "rizzlers-ibe-dev-tfstate"
            key    = "frontend/terraform.tfstate"
            region = "ap-south-1"
          }
        }

        provider "aws" {
          region = "ap-south-1"
        }

        # S3 bucket configuration
        resource "aws_s3_bucket" "frontend_bucket" {
          bucket = "rizzlers-frontend-dev"
          tags = {
            Name = "Rizzlers Frontend Bucket"
            Environment = "dev"
          }
        }

        # S3 bucket website configuration
        resource "aws_s3_bucket_website_configuration" "frontend_website" {
          bucket = aws_s3_bucket.frontend_bucket.id
          index_document {
            suffix = "index.html"
          }
          error_document {
            key = "index.html"
          }
        }

        # S3 bucket public access block
        resource "aws_s3_bucket_public_access_block" "frontend_public_access" {
          bucket = aws_s3_bucket.frontend_bucket.id
          block_public_acls       = false
          block_public_policy     = false
          ignore_public_acls      = false
          restrict_public_buckets = false
        }

        # S3 bucket policy for public access
        resource "aws_s3_bucket_policy" "frontend_policy" {
          bucket = aws_s3_bucket.frontend_bucket.id
          policy = jsonencode({
            Version = "2012-10-17"
            Statement = [
              {
                Sid = "PublicReadGetObject"
                Effect = "Allow"
                Principal = "*"
                Action = [
                  "s3:GetObject"
                ]
                Resource = [
                  "${aws_s3_bucket.frontend_bucket.arn}/*"
                ]
              }
            ]
          })
          depends_on = [aws_s3_bucket_public_access_block.frontend_public_access]
        }

        # CloudFront distribution
        resource "aws_cloudfront_distribution" "frontend" {
          enabled             = true
          is_ipv6_enabled     = true
          default_root_object = "index.html"
          comment             = "Rizzlers Frontend Distribution"
          price_class         = "PriceClass_200"
          wait_for_deployment = false

          origin {
            domain_name = aws_s3_bucket_website_configuration.frontend_website.website_endpoint
            origin_id   = "S3-${aws_s3_bucket.frontend_bucket.id}"

            custom_origin_config {
              http_port              = 80
              https_port             = 443
              origin_protocol_policy = "http-only"
              origin_ssl_protocols   = ["TLSv1.2"]
            }
          }

          default_cache_behavior {
            allowed_methods  = ["GET", "HEAD", "OPTIONS"]
            cached_methods   = ["GET", "HEAD"]
            target_origin_id = "S3-${aws_s3_bucket.frontend_bucket.id}"
            forwarded_values {
              query_string = false
              cookies {
                forward = "none"
              }
            }
            viewer_protocol_policy = "redirect-to-https"
            min_ttl                = 0
            default_ttl            = 3600
            max_ttl                = 86400
          }

          custom_error_response {
            error_code         = 403
            response_code      = 200
            response_page_path = "/index.html"
          }

          custom_error_response {
            error_code         = 404
            response_code      = 200
            response_page_path = "/index.html"
          }

          restrictions {
            geo_restriction {
              restriction_type = "none"
            }
          }

          viewer_certificate {
            cloudfront_default_certificate = true
          }

          tags = {
            Name = "Rizzlers-dev-cloudfront"
            Creator = "Rizzlers Team"
            Purpose = "IBE"
          }
        }

        output "s3_bucket_name" {
          value = aws_s3_bucket.frontend_bucket.id
        }

        output "cloudfront_distribution_id" {
          value = aws_cloudfront_distribution.frontend.id
        }

        output "cloudfront_domain_name" {
          value = aws_cloudfront_distribution.frontend.domain_name
        }

        output "s3_website_endpoint" {
          value = aws_s3_bucket_website_configuration.frontend_website.website_endpoint
        }
        EOF
      - cd terraform/environments/$ENVIRONMENT
      - terraform init -reconfigure

  build:
    commands:
      - terraform apply -auto-approve || echo "Terraform apply failed, but continuing build"
      - export S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "rizzlers-frontend-dev")
      - export CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
      - export CLOUDFRONT_DOMAIN_NAME=$(terraform output -raw cloudfront_domain_name 2>/dev/null || echo "")
      - cd ../../..  # Back to root
      - pwd  # Print working directory
      - ls -la  # List files
      - echo "Building the React application"
      - |
        if [ -d "frontend" ]; then
          cd frontend
          npm install
          npm run build
          cd ..
          # Copy build output to a predictable location
          if [ -d "frontend/dist" ]; then
            mkdir -p dist
            cp -r frontend/dist/* dist/
          elif [ -d "frontend/build" ]; then
            mkdir -p dist
            cp -r frontend/build/* dist/
          fi
        else
          # If no frontend directory exists, create a simple build output
          mkdir -p dist
          echo '<html><body><h1>Rizzlers Frontend</h1><p>Placeholder page</p></body></html>' > dist/index.html
        fi
      - ls -la dist/  # List files in dist directory
      - # Upload to S3 regardless of build path
      - |
        if [ -d "dist" ]; then
          echo "Uploading from dist directory to S3"
          aws s3 sync dist/ s3://$S3_BUCKET_NAME/ --delete || echo "S3 sync failed"
        else
          echo "No dist directory found, creating one..."
          mkdir -p dist
          echo '<html><body><h1>Rizzlers Frontend</h1><p>Build artifact not found</p></body></html>' > dist/index.html
          aws s3 sync dist/ s3://$S3_BUCKET_NAME/ --delete || echo "S3 sync failed"
        fi
      - # Invalidate CloudFront cache if we have a distribution ID
      - |
        if [ ! -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then 
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*" || echo "CloudFront invalidation failed"
        fi

  post_build:
    commands:
      - echo "Build complete"
      - echo "=============================================================="
      - echo "Debug information about directories:"
      - find . -type d | grep dist || echo "No dist directories found"
      - echo "Current working directory: $(pwd)"
      - ls -la
      - |
        # Ensure dist directory exists and has content
        if [ ! -d "dist" ]; then
          echo "Creating dist directory for artifacts"
          mkdir -p dist
          echo '<html><body><h1>Rizzlers Frontend</h1><p>Placeholder for artifacts</p></body></html>' > dist/index.html
        fi
      - echo "Contents of dist directory:"
      - ls -la dist/ || echo "Could not list dist directory"
      - # Ensure we have at least one file in the artifacts directory
      - cp buildspec.yml dist/

artifacts:
  files:
    - '**/*'
  base-directory: 'dist'
  discard-paths: no

cache:
  paths:
    - 'frontend/node_modules/**/*'
    - 'node_modules/**/*'