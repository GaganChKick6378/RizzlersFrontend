version: 0.2

env:
  variables:
    TERRAFORM_VERSION: 1.5.7
    NODE_VERSION: 18
    DEFAULT_ENVIRONMENT: dev
    TERRAFORM_STATE_BUCKET: rizzlers-ibe-dev-tfstate
    TERRAFORM_STATE_KEY: frontend/terraform.tfstate
    TERRAFORM_STATE_REGION: ap-south-1
    AWS_REGION: ap-south-1

phases:
  install:
    runtime-versions:
      nodejs: $NODE_VERSION
    commands:
      - echo Installing Terraform
      - rm -rf terraform/  # Clean up if exists
      - rm -f terraform
      - wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip -o -q terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - pip install --upgrade pip
      - pip install awscli --upgrade
      - aws --version

  pre_build:
    commands:
      - echo Creating Terraform configuration
      - ENVIRONMENT=dev
      - mkdir -p terraform/environments/$ENVIRONMENT
      - |
        cat > terraform/environments/$ENVIRONMENT/main.tf << 'EOF'
        terraform {
          backend "s3" {
            bucket = "rizzlers-ibe-dev-tfstate"
            key    = "frontend/terraform.tfstate"
            region = "ap-south-1"
          }
        }

        provider "aws" {
          region = "ap-south-1"
        }

        # S3 bucket configuration - assuming it may already exist
        resource "aws_s3_bucket" "frontend_bucket" {
          bucket = "rizzlers-frontend-dev"
          tags = {
            Name = "Rizzlers Frontend Bucket"
            Environment = "dev"
          }
          # Prevent destroy of the bucket if it already exists
          lifecycle {
            prevent_destroy = false
          }
        }

        # S3 bucket website configuration
        resource "aws_s3_bucket_website_configuration" "frontend_website" {
          bucket = aws_s3_bucket.frontend_bucket.id
          index_document {
            suffix = "index.html"
          }
          error_document {
            key = "index.html"
          }
        }

        # S3 bucket public access block
        resource "aws_s3_bucket_public_access_block" "frontend_public_access" {
          bucket = aws_s3_bucket.frontend_bucket.id
          block_public_acls       = false
          block_public_policy     = false
          ignore_public_acls      = false
          restrict_public_buckets = false
        }

        # S3 bucket policy for public access
        resource "aws_s3_bucket_policy" "frontend_policy" {
          bucket = aws_s3_bucket.frontend_bucket.id
          policy = jsonencode({
            Version = "2012-10-17",
            Statement = [
              {
                Sid = "PublicReadGetObject",
                Effect = "Allow",
                Principal = "*",
                Action = [
                  "s3:GetObject"
                ],
                Resource = [
                  "${aws_s3_bucket.frontend_bucket.arn}/*"
                ]
              }
            ]
          })
          depends_on = [aws_s3_bucket_public_access_block.frontend_public_access]
        }

        # CloudFront distribution
        resource "aws_cloudfront_distribution" "frontend" {
          enabled             = true
          is_ipv6_enabled     = true
          default_root_object = "index.html"
          comment             = "Rizzlers Frontend Distribution"
          price_class         = "PriceClass_200"
          wait_for_deployment = false

          origin {
            domain_name = "${aws_s3_bucket.frontend_bucket.bucket}.s3-website-ap-south-1.amazonaws.com"
            origin_id   = "S3-${aws_s3_bucket.frontend_bucket.bucket}"

            custom_origin_config {
              http_port              = 80
              https_port             = 443
              origin_protocol_policy = "http-only"
              origin_ssl_protocols   = ["TLSv1.2"]
            }
          }

          default_cache_behavior {
            allowed_methods  = ["GET", "HEAD", "OPTIONS"]
            cached_methods   = ["GET", "HEAD"]
            target_origin_id = "S3-${aws_s3_bucket.frontend_bucket.bucket}"

            forwarded_values {
              query_string = false
              cookies {
                forward = "none"
              }
            }

            viewer_protocol_policy = "redirect-to-https"
            min_ttl                = 0
            default_ttl            = 3600
            max_ttl                = 86400
            compress               = true
          }

          custom_error_response {
            error_code         = 403
            response_code      = 200
            response_page_path = "/index.html"
          }

          custom_error_response {
            error_code         = 404
            response_code      = 200
            response_page_path = "/index.html"
          }

          restrictions {
            geo_restriction {
              restriction_type = "none"
            }
          }

          viewer_certificate {
            cloudfront_default_certificate = true
          }

          tags = {
            Name = "Rizzlers-dev-cloudfront"
            Creator = "Rizzlers Team"
            Purpose = "IBE"
          }
        }

        output "s3_bucket_name" {
          value = aws_s3_bucket.frontend_bucket.bucket
        }

        output "cloudfront_distribution_id" {
          value = aws_cloudfront_distribution.frontend.id
        }

        output "cloudfront_domain_name" {
          value = aws_cloudfront_distribution.frontend.domain_name
        }

        output "s3_website_endpoint" {
          value = "${aws_s3_bucket.frontend_bucket.bucket}.s3-website-ap-south-1.amazonaws.com"
        }
        EOF
      - cd terraform/environments/$ENVIRONMENT
      - terraform init -reconfigure

  build:
    commands:
      - echo "Applying Terraform configuration..."
      - terraform apply -auto-approve
      - echo "Terraform outputs:"
      - terraform output
      - export S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "rizzlers-frontend-dev")
      - export CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
      - export CLOUDFRONT_DOMAIN_NAME=$(terraform output -raw cloudfront_domain_name 2>/dev/null || echo "")
      - echo "CloudFront Distribution ID: $CLOUDFRONT_DISTRIBUTION_ID"
      - echo "CloudFront Domain Name: $CLOUDFRONT_DOMAIN_NAME"
      - echo "S3 Website Endpoint: $(terraform output -raw s3_website_endpoint)"
      - echo "Listing CloudFront distributions:"
      - aws cloudfront list-distributions --query 'DistributionList.Items[*].{Id:Id,DomainName:DomainName,Comment:Comment}' --output table
      - cd ../../..  # Back to root
      - pwd  # Print working directory
      - ls -la  # List files
      - echo "Building the React application"
      - |
        if [ -d "frontend" ]; then
          cd frontend
          npm install
          npm run build
          cd ..
          # Copy build output to a predictable location
          mkdir -p dist
          if [ -d "frontend/dist" ]; then
            cp -r frontend/dist/* dist/
          elif [ -d "frontend/build" ]; then
            cp -r frontend/build/* dist/
          fi
        else
          # If no frontend directory exists, create a simple build output
          mkdir -p dist
          echo '<html><body><h1>Rizzlers Frontend</h1><p>Placeholder page</p></body></html>' > dist/index.html
        fi
      - ls -la dist/  # List files in dist directory
      - # Upload to S3 regardless of build path
      - echo "Uploading from dist directory to S3 bucket: $S3_BUCKET_NAME"
      - aws s3 sync dist/ s3://$S3_BUCKET_NAME/ --delete
      - # Invalidate CloudFront cache if we have a distribution ID
      - |
        if [ ! -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then 
          echo "Creating CloudFront invalidation for distribution: $CLOUDFRONT_DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
          echo "Access your application at: https://$CLOUDFRONT_DOMAIN_NAME"
        else
          echo "No CloudFront distribution ID found"
        fi

  post_build:
    commands:
      - echo "Build complete"
      - echo "=============================================================="
      - echo "APPLICATION URL: https://$CLOUDFRONT_DOMAIN_NAME"
      - echo "=============================================================="
      - |
        # Ensure dist directory exists and has content
        if [ ! -d "dist" ]; then
          echo "Creating dist directory for artifacts"
          mkdir -p dist
          echo '<html><body><h1>Rizzlers Frontend</h1><p>Placeholder for artifacts</p></body></html>' > dist/index.html
        fi
      - echo "Contents of dist directory:"
      - ls -la dist/
      - # Create a deployment info file
      - |
        cat > dist/deployment-info.txt << EOF
        Deployment Information:
        S3 Bucket: $S3_BUCKET_NAME
        CloudFront Distribution ID: $CLOUDFRONT_DISTRIBUTION_ID
        Application URL: https://$CLOUDFRONT_DOMAIN_NAME
        Deployment Date: $(date)
        EOF
      - cat dist/deployment-info.txt

artifacts:
  files:
    - '**/*'
  base-directory: 'dist'
  discard-paths: no

cache:
  paths:
    - 'frontend/node_modules/**/*'
    - 'node_modules/**/*'