version: 0.2

env:
  variables:
    TERRAFORM_VERSION: 1.5.7
    NODE_VERSION: 18
    DEFAULT_ENVIRONMENT: dev
  parameter-store:
    AWS_ACCESS_KEY_ID: /rizzlers/access_id
    AWS_SECRET_ACCESS_KEY: /rizzlers/secret_key

phases:
  install:
    runtime-versions:
      nodejs: $NODE_VERSION
    commands:
      - echo Installing Terraform
      - if [ -d terraform ]; then rm -rf terraform; fi
      - if [ -f terraform ]; then rm -f terraform; fi
      - wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip -o -q terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - mv terraform /usr/local/bin/
      - rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - pip install --upgrade pip
      - pip install awscli --upgrade

  pre_build:
    commands:
      - |
        # Determine environment based on branch or use default
        if [ -n "$CODEBUILD_WEBHOOK_HEAD_REF" ]; then
          # This is a webhook-triggered build
          if [ "$CODEBUILD_WEBHOOK_HEAD_REF" = "refs/heads/dev" ]; then
            ENVIRONMENT=dev
          elif [ "$CODEBUILD_WEBHOOK_HEAD_REF" = "refs/heads/qa" ]; then
            ENVIRONMENT=qa
          else
            echo "Branch $CODEBUILD_WEBHOOK_HEAD_REF not configured, using default"
            ENVIRONMENT=$DEFAULT_ENVIRONMENT
          fi
        elif [ -n "$CODEBUILD_SOURCE_VERSION" ]; then
          # This might be a git branch name
          if [ "$CODEBUILD_SOURCE_VERSION" = "dev" ]; then
            ENVIRONMENT=dev
          elif [ "$CODEBUILD_SOURCE_VERSION" = "qa" ]; then
            ENVIRONMENT=qa
          else
            echo "Source version $CODEBUILD_SOURCE_VERSION not configured, using default"
            ENVIRONMENT=$DEFAULT_ENVIRONMENT
          fi
        else
          # Manual build or other trigger
          echo "Manual build detected, using default environment"
          ENVIRONMENT=$DEFAULT_ENVIRONMENT
        fi
      - echo "Deploying to $ENVIRONMENT environment"
      - export ENVIRONMENT=$ENVIRONMENT
      - cd terraform/environments/$ENVIRONMENT
      - echo "Initializing Terraform..."
      - terraform init

  build:
    commands:
      - echo Applying Terraform
      - terraform apply -auto-approve
      - export S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
      - export CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
      - echo S3 Bucket $S3_BUCKET_NAME
      - echo CloudFront Distribution $CLOUDFRONT_DISTRIBUTION_ID
      - echo Writing bucket info to file for deployment stage
      - echo $S3_BUCKET_NAME > bucket-name.txt
      - echo $CLOUDFRONT_DISTRIBUTION_ID > cloudfront-id.txt
      - echo Building frontend
      - cd ../../../frontend
      - npm ci
      - npm run build

  post_build:
    commands:
      - echo Build complete
      - cp ../bucket-name.txt dist/
      - cp ../cloudfront-id.txt dist/

artifacts:
  files:
    - frontend/dist/**/*
    - bucket-name.txt
    - cloudfront-id.txt
  base-directory: .
  discard-paths: no

cache:
  paths:
    - frontend/node_modules/**/* 